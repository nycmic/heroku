import React from 'react';
import PropTypes from 'prop-types'
import { OauthSender } from 'react-oauth-flow';

const DrupalConnectLink = ({url, title}) => (
  <a href={url}>{title}</a>
);

/**
 * Create a link that can be used for registration.
 *
 * This takes the authorize URL generated by OauthSender, extracts the query
 * string from it, and then uses that to generate a new URL for /user/register
 * with an ?destination parameter that will redirect to the authorize URL with
 * the appropriate query string after the registration process is complete.
 *
 * This takes advantage of some Drupalisms like ?destination=.
 */
const DrupalRegisterLink = ({url, title, drupalRoot}) => {
  let query = url.split('?')[1];
  query = encodeURIComponent(`?${query}`);
  return (
    <a href={`${drupalRoot}/user/register?destination=/oauth/authorize${query}`}>{title}</a>
  );
}

const ConnectToDrupal = (props) => (
  <OauthSender
    authorizeUrl={props.drupalOauthClient.config.authorize_url}
    clientId={props.drupalOauthClient.config.client_id}
    redirectUri={props.redirectUri}
    state={{}}
    render={({url}) => {
      if (props.useRegistrationLink === true) {
        return <DrupalRegisterLink url={url} title={props.title} drupalRoot={props.drupalOauthClient.config.drupal_root} />;
      }
      return <DrupalConnectLink url={url} title={props.title} />;
    }}
  />
);

ConnectToDrupal.propTypes = {
  // An instance of the drupalOauth class, used to obtain configuration.
  drupalOauthClient: PropTypes.object.isRequired,
  // The URL to redirect to after obtaining a grant from the server.
  redirectUri: PropTypes.string.isRequired,
  // The text to use for the link.
  title: PropTypes.string.isRequired,
  // If set to true use a link that will allow someone to register a new
  // account, and then authorize the grant.
  useRegistrationLink: PropTypes.bool,
};

export default ConnectToDrupal;
